/**
 * Exemplo de uso do novo sistema de configura√ß√£o robusto
 * que tenta se conectar usando hostname, com fallback para IP
 */

const config = require('./config');
const { Pool } = require('pg');

async function demonstracaoConexaoRobusta() {
  console.log('üöÄ Demonstra√ß√£o de conex√£o robusta ao PostgreSQL');
  console.log('------------------------------------------------');
  
  try {
    // Obter a melhor configura√ß√£o de conex√£o dispon√≠vel (hostname ou IP)
    console.log('‚è≥ Obtendo a melhor configura√ß√£o de conex√£o...');
    const configDb = await config.obterConfiguracaoDb();
    console.log(`‚úÖ Usando host: ${configDb.host}`);
    
    // Criar pool de conex√£o com a configura√ß√£o obtida
    const pool = new Pool(configDb);
    const client = await pool.connect();
    console.log('‚úÖ Conectado ao banco de dados!');
    
    // Consultar algumas informa√ß√µes
    const info = await client.query(`
      SELECT 
        current_database() as banco,
        current_user as usuario,
        current_timestamp as data_hora,
        version() as versao
    `);
    
    console.log('\nüìä Informa√ß√µes do banco de dados:');
    console.table(info.rows[0]);
    
    // Listar tabelas
    const tabelas = await client.query(`
      SELECT tablename 
      FROM pg_catalog.pg_tables 
      WHERE schemaname = 'public' 
      ORDER BY tablename
    `);
    
    console.log('\nüìã Tabelas dispon√≠veis:');
    const nomeTabelas = tabelas.rows.map(t => t.tablename);
    console.table(nomeTabelas);
    
    // Exemplo de consulta em uma tabela
    if (nomeTabelas.includes('teste2')) {
      const dados = await client.query('SELECT * FROM teste2');
      console.log('\nüìÑ Dados da tabela teste2:');
      console.table(dados.rows);
    }
    
    // Limpar conex√µes
    client.release();
    await pool.end();
    console.log('\nüëã Desconectado do banco de dados');
    
  } catch (erro) {
    console.error(`‚ùå Erro: ${erro.message}`);
  }
}

// Executar demonstra√ß√£o
demonstracaoConexaoRobusta();

/**
 * Esta abordagem √© muito mais robusta porque:
 * 
 * 1. Tenta primeiro conectar usando um nome de host, que n√£o muda mesmo que o IP mude
 * 2. Se o nome de host falhar, tenta com o IP conhecido
 * 3. Pode ser facilmente adaptada para ler de vari√°veis de ambiente
 * 4. Centraliza a l√≥gica de conex√£o em um √∫nico local
 * 5. Fornece diagn√≥stico claro sobre qual m√©todo de conex√£o est√° sendo usado
 * 
 * Para ambientes de produ√ß√£o, recomenda-se evoluir este modelo para:
 * - Ler credenciais de vari√°veis de ambiente
 * - Implementar retry com backoff exponencial
 * - Adicionar pool de conex√µes com limites adequados
 * - Implementar logging estruturado
 */
